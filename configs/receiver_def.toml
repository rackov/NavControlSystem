# ==============================================================================
# Конфигурация сервиса NavControlSystem Receiver
# ==============================================================================
# Этот файл содержит все настройки для запуска и работы сервиса,
# отвечающего за прием навигационных данных по различным протоколам.

# ==============================================================================
# ОБЩИЕ НАСТРОЙКИ СЕРВИСА
# ==============================================================================

# Порт, на котором будет запущен gRPC-сервер для управления.
# На этот порт будут приходить запросы от Rest API для создания/удаления портов.
grpc_port = 50051

# Порт, на котором будет запущен HTTP-сервер для экспорта метрик в формате Prometheus.
# Эти метрики можно собирать системами мониторинга (Prometheus, Grafana).
monitoring_port = 9090

# ==============================================================================
# НАСТРОЙКИ ЛОГИРОВАНИЯ
# ==============================================================================

[log]
# Уровень логирования при старте сервиса.
# Допустимые значения: "debug", "info", "warn", "error", "fatal", "panic".
# Может быть изменен динамически через gRPC API.
log_level = "info"

# Путь к файлу для записи логов.
# Логи будут ротироваться (разделяться) по дням и размеру.
log_file_path = "./logs/receiver.log"

# Максимальный размер одного лог-файла в мегабайтах перед ротацией.
max_size = 100

# Максимальное количество старых лог-файлов для хранения.
max_backups = 5

# Максимальное количество дней для хранения старых лог-файлов.
max_age = 30

# Сжимать ли старые лог-файлы в формат .gz для экономии места.
compress = true

# ==============================================================================
# НАСТРОЙКИ ПОДКЛЮЧЕНИЯ К NATS
# ==============================================================================
# URL для подключения к серверу NATS.
# Формат: nats://<host>:<port>
# Для кластера можно указать несколько через запятую: nats://server1:4222,nats://server2:4222
nats_url = "nats://localhost:4222"

# ==============================================================================
# НАСТРОЙКИ ПОРТОВ ПРИЕМА ДАННЫХ
# ==============================================================================
# Это массив (TOML array of tables) для конфигурации каждого слушающего порта.
# Вы можете добавить столько секций [[ports]], сколько необходимо.
# Сервис будет открывать TCP-порты, указанные здесь, для приема данных от устройств.

# --- Пример конфигурации для протокола ARNAVI ---
[[ports]]
# Номер TCP порта для прослушивания. Должен быть уникальным.
port_number = 8001
# Имя протокола, который будет обрабатывать данные на этом порту.
# Должно соответствовать одному из зарегистрированных обработчиков (например, "ARNAVI", "EGTS").
protocol = "ARNAVI"
# Топик в NATS, в который будут публиковаться распарсенные данные с этого порта.
nats_topic = "nav.data.raw.arnavi"
# Флаг, указывающий, должен ли порт быть открыт при старте сервиса.
# Если true, сервис попытается открыть этот порт сразу после запуска.
# Если false, порт будет создан в конфигурации, но его нужно будет открыть вручную через gRPC API.
is_active = true

# --- Пример конфигурации для протокола EGTS ---
#[[ports]]
#port_number = 8002
#protocol = "EGTS"
#nats_topic = "nav.data.raw.egts"
#is_active = false # Этот порт будет создан, но не открыт при старте.

## --- Пример конфигурации для протокола NDTP ---
#[[ports]]
#port_number = 8003
#protocol = "NDTP"
#nats_topic = "nav.data.raw.ndtp"
#is_active = false

# ==============================================================================
# ПРИМЕЧАНИЯ
# ==============================================================================
#
# 1. Порты (port_number) должны быть уникальными в рамках одной машины.
# 2. Имена протоколов (protocol) должны точно совпадать с теми, что зарегистрированы
#    в коде сервиса (в `portmanager/handlers.go`).
# 3. При запуске сервиса:
#    - Сервис прочитает этот конфиг-файл.
#    - Инициализирует логгер.
#    - Подключится к NATS.
#    - Запустит gRPC и monitoring серверы.
#    - Пройдется по всем секциям `[[ports]]` и для тех, у кого `is_active = true`,
#      попытается открыть порт и начать принимать данные.
# 4. Если соединение с NATS будет потеряно, сервис закроет все активные порты
#    и будет периодически пытаться переподключиться. После успешного
#    переподключения он снова откроет порты, которые были активны в конфиге.
