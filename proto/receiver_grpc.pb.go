// Синтаксис Protocol Buffers v3

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: receiver.proto

// Пакет для Go

package proto

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ReceiverService_CreatePort_FullMethodName = "/receiver.ReceiverService/CreatePort"
	ReceiverService_DeletePort_FullMethodName = "/receiver.ReceiverService/DeletePort"
	ReceiverService_OpenPort_FullMethodName   = "/receiver.ReceiverService/OpenPort"
	ReceiverService_ClosePort_FullMethodName  = "/receiver.ReceiverService/ClosePort"
	ReceiverService_ListPorts_FullMethodName  = "/receiver.ReceiverService/ListPorts"
)

// ReceiverServiceClient is the client API for ReceiverService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Сервис для управления портами приемника данных
type ReceiverServiceClient interface {
	// Создает новый порт с конфигурацией, но не открывает его.
	CreatePort(ctx context.Context, in *CreatePortRequest, opts ...grpc.CallOption) (*PortResponse, error)
	// Удаляет порт. Если он был открыт, он будет закрыт.
	DeletePort(ctx context.Context, in *DeletePortRequest, opts ...grpc.CallOption) (*empty.Empty, error)
	// Открывает ранее созданный порт для приема данных.
	OpenPort(ctx context.Context, in *OpenPortRequest, opts ...grpc.CallOption) (*PortResponse, error)
	// Закрывает открытый порт, отключая всех клиентов.
	ClosePort(ctx context.Context, in *ClosePortRequest, opts ...grpc.CallOption) (*PortResponse, error)
	// Возвращает список всех сконфигурированных портов и их статус.
	ListPorts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListPortsResponse, error)
}

type receiverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewReceiverServiceClient(cc grpc.ClientConnInterface) ReceiverServiceClient {
	return &receiverServiceClient{cc}
}

func (c *receiverServiceClient) CreatePort(ctx context.Context, in *CreatePortRequest, opts ...grpc.CallOption) (*PortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PortResponse)
	err := c.cc.Invoke(ctx, ReceiverService_CreatePort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverServiceClient) DeletePort(ctx context.Context, in *DeletePortRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, ReceiverService_DeletePort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverServiceClient) OpenPort(ctx context.Context, in *OpenPortRequest, opts ...grpc.CallOption) (*PortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PortResponse)
	err := c.cc.Invoke(ctx, ReceiverService_OpenPort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverServiceClient) ClosePort(ctx context.Context, in *ClosePortRequest, opts ...grpc.CallOption) (*PortResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PortResponse)
	err := c.cc.Invoke(ctx, ReceiverService_ClosePort_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *receiverServiceClient) ListPorts(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*ListPortsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListPortsResponse)
	err := c.cc.Invoke(ctx, ReceiverService_ListPorts_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ReceiverServiceServer is the server API for ReceiverService service.
// All implementations must embed UnimplementedReceiverServiceServer
// for forward compatibility.
//
// Сервис для управления портами приемника данных
type ReceiverServiceServer interface {
	// Создает новый порт с конфигурацией, но не открывает его.
	CreatePort(context.Context, *CreatePortRequest) (*PortResponse, error)
	// Удаляет порт. Если он был открыт, он будет закрыт.
	DeletePort(context.Context, *DeletePortRequest) (*empty.Empty, error)
	// Открывает ранее созданный порт для приема данных.
	OpenPort(context.Context, *OpenPortRequest) (*PortResponse, error)
	// Закрывает открытый порт, отключая всех клиентов.
	ClosePort(context.Context, *ClosePortRequest) (*PortResponse, error)
	// Возвращает список всех сконфигурированных портов и их статус.
	ListPorts(context.Context, *empty.Empty) (*ListPortsResponse, error)
	mustEmbedUnimplementedReceiverServiceServer()
}

// UnimplementedReceiverServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedReceiverServiceServer struct{}

func (UnimplementedReceiverServiceServer) CreatePort(context.Context, *CreatePortRequest) (*PortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePort not implemented")
}
func (UnimplementedReceiverServiceServer) DeletePort(context.Context, *DeletePortRequest) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeletePort not implemented")
}
func (UnimplementedReceiverServiceServer) OpenPort(context.Context, *OpenPortRequest) (*PortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OpenPort not implemented")
}
func (UnimplementedReceiverServiceServer) ClosePort(context.Context, *ClosePortRequest) (*PortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClosePort not implemented")
}
func (UnimplementedReceiverServiceServer) ListPorts(context.Context, *empty.Empty) (*ListPortsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListPorts not implemented")
}
func (UnimplementedReceiverServiceServer) mustEmbedUnimplementedReceiverServiceServer() {}
func (UnimplementedReceiverServiceServer) testEmbeddedByValue()                         {}

// UnsafeReceiverServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ReceiverServiceServer will
// result in compilation errors.
type UnsafeReceiverServiceServer interface {
	mustEmbedUnimplementedReceiverServiceServer()
}

func RegisterReceiverServiceServer(s grpc.ServiceRegistrar, srv ReceiverServiceServer) {
	// If the following call pancis, it indicates UnimplementedReceiverServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ReceiverService_ServiceDesc, srv)
}

func _ReceiverService_CreatePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServiceServer).CreatePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiverService_CreatePort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServiceServer).CreatePort(ctx, req.(*CreatePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiverService_DeletePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeletePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServiceServer).DeletePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiverService_DeletePort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServiceServer).DeletePort(ctx, req.(*DeletePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiverService_OpenPort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OpenPortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServiceServer).OpenPort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiverService_OpenPort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServiceServer).OpenPort(ctx, req.(*OpenPortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiverService_ClosePort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ClosePortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServiceServer).ClosePort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiverService_ClosePort_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServiceServer).ClosePort(ctx, req.(*ClosePortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ReceiverService_ListPorts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ReceiverServiceServer).ListPorts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ReceiverService_ListPorts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ReceiverServiceServer).ListPorts(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// ReceiverService_ServiceDesc is the grpc.ServiceDesc for ReceiverService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ReceiverService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "receiver.ReceiverService",
	HandlerType: (*ReceiverServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePort",
			Handler:    _ReceiverService_CreatePort_Handler,
		},
		{
			MethodName: "DeletePort",
			Handler:    _ReceiverService_DeletePort_Handler,
		},
		{
			MethodName: "OpenPort",
			Handler:    _ReceiverService_OpenPort_Handler,
		},
		{
			MethodName: "ClosePort",
			Handler:    _ReceiverService_ClosePort_Handler,
		},
		{
			MethodName: "ListPorts",
			Handler:    _ReceiverService_ListPorts_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "receiver.proto",
}
